#!/usr/bin/env ruby


require 'pathname'

require 'listen'
require 'resque'

require 'bagger'


# TODO: Need to add a layer on top of the listener that also watches the
# `modified` notifications and only sends it on to resque when it's no longer
# being changed. This is especially a big deal for large files that may take a
# while to copy.

module Bagger
  def self.main
    listen_path = ARGV[0]
    dest_path   = ARGV[1]

    if listen_path.nil? || dest_path.nil?
      puts "usage: bag-ingest LISTEN-PATH DEST-PATH"
    else
      puts "Listening to #{listen_path}"
      Listen.to!(listen_path, :filter => /\.zip$/) do |modified, added, removed|
        added.each do |a|
          puts "Watching #{a}"
          STDOUT.flush
          Thread.new do
            watch_enqueue(a, dest_path)
          end
        end
      end
    end
  end

  def self.watch_enqueue(file_path, dest_path)
    f    = File.new(file_path)
    size = f.size

    while true do
      sleep(0.5)
      puts "\tChecking. Size = #{size} / #{f.size}"
      STDOUT.flush
      if f.size == size
        puts "Enqueuing #{file_path}"
        STDOUT.flush
        Resque.enqueue(Bagger::Worker, parse_institution(file_path), file_path, dest_path)
        break
      else
        size = f.size
      end
    end
  end

  def self.parse_institution(pathname)
    Pathname.new(pathname).dirname.basename.to_s
  end
end

Bagger.main

