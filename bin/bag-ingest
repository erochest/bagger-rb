#!/usr/bin/env ruby


require 'pathname'

require 'listen'
require 'resque'

require 'bagger'

def flush_out(msg)
  puts msg
  STDOUT.flush
end


module Bagger
  def self.main
    listen_path = ARGV[0]
    dest_path   = ARGV[1]

    if listen_path.nil? || dest_path.nil?
      puts "usage: bag-ingest LISTEN-PATH DEST-PATH"
    else
      puts "Listening to #{listen_path}"
      Listen.to!(listen_path, :filter => /\.zip$/) do |modified, added, removed|
        added.each do |a|
          flush_out "Watching #{a}"
          Thread.new do
            watch_enqueue(a, dest_path)
          end
        end
      end
    end
  end

  def self.watch_enqueue(file_path, dest_path)
    period  = 0.5
    backoff = 1.5

    while true do
      sleep(period)

      if is_open?(file_path)
        period *= backoff

      else
        flush_out "Enqueuing #{file_path}"
        Resque.enqueue(Bagger::Worker, parse_institution(file_path), file_path, dest_path)
        break
      end
    end
  end

  def self.is_open?(filename)
    flush_out "is_open? #{filename}"
    ret_value = true
    IO.popen(['fuser', filename], :err=>[:child, :out]) do |out|
      out.readlines.each do |line|
        pid = line.split(':')[1].strip
        if pid.empty?
          ret_value = false
        end
      end
    end
    ret_value
  end

  def self.parse_institution(pathname)
    Pathname.new(pathname).dirname.basename.to_s
  end
end

Bagger.main

